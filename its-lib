

build_its(){
##User-Made  Tools ##User menu Generater ##

APP_NAME=$(whiptail --title "Tool generator" --inputbox "Enter tools Name, no spaces or specile charicters: " 10 60 3>&1 1>&2 2>&3)

if [ ! -f "$(dirname "$0")/its/other/${APP_NAME}.its" ] ; then
    APP_DESC=$(whiptail --title "Enter a bash command" --inputbox "Enter a bash command:" 10 60 3>&1 1>&2 2>&3)
    printf "\n\nrun_${APP_NAME}(){\n\x23\x23User-Made \x20Tools\x20\x23\x23${APP_NAME}\x20\x23\x23\n\n\tclear\x3B\n\t${APP_DESC}\n\n}\n" > "$(dirname "$0")/its/other/${APP_NAME}.its"
    ( make_its && source "$libname" ; run_whiptail)
    return 1
else
    whiptail --title "Error" --msgbox "$( echo ${APP_NAME} ).its file exist!\nPllease try agian" 10 60
    return 1
fi

}

# Requiers EFT-ITS format to show in menu is
# double shh (2x#) singleString (2X#) Short multy string discription

# Charles Cooke's 16-color Mandelbrot
# http://earth.gkhs.net/ccooke/shell.html

function doBash {
	typeset P Q X Y a b c i v x y
	for ((P=10**8,Q=P/100,X=320*Q/cols,Y=210*Q/lines,y=-105*Q,v=-220*Q,x=v;y<105*Q;x=v,y+=Y)); do
		for ((;x<P;a=b=i=c=0,x+=X)); do
			for ((;a**2+b**2<4*P**2&&i++<99;a=((c=a)**2-b**2)/P+x,b=2*c*b/P+y)); do :
			done
			colorBox $((i<99?i%16:0))
		done
		echo
	done
}

function colorBox {
	(($1==lastclr)) || printf %s "${colrs[lastclr=$1]:=$(tput setaf "$1")}"
	printf '\u2588'
}

see_mandelbrot(){
##User-Made  Tools ##Charles Cooke's 16-color Mandelbrot ##

  tput smcup && clear
  	unset -v lastclr
  	((cols=$(tput cols)-1, lines=$(tput lines)))
  	typeset -a colrs
	  trap 'tput sgr0; echo' EXIT
  	${BASH_VERSION+doBash}
  tput rmcup

}

go_sister(){
##Sensor     Tools ##SenPi (Sensor Integrating API) ##

if [ ! -d "$HOME/.local/src" ]; then
    mkdir -p "$HOME/.local/src"
	cd "$HOME/.local/src"
	wrkdir=$(pwd)
else
    cd "$HOME/.local/src"
	wrkdir=$(pwd)
fi

# Check if git and pip3 are installed

if ! command -v git &> /dev/null; then
    apt_package+=("git")
fi

if ! command -v pip3 &> /dev/null; then
    echo "Pip3 is not installed"
    apt_package+=("python3-pip")
fi

if [ ${#apt_package[@]} -eq 0 ]; then
    mssg="'All required apt packages are installed'"
    whiptail --title "Error" --msgbox "$( echo ${mssg} )" 10 60
else
    sudo apt update
    sudo apt install -y "${apt_package[@]}"
fi

if [ ! -d "$HOME/.local/src/sister" ]; then
    echo "Downloading git repository"
	cd "$HOME/.local/src" && git clone https://github.com/Tearran/sister.git
fi

}


run_st7789(){
##Display    Tools ##LCD-SPI driver (ST7789) ##
	echo -e "\nA place holder for:\n\tjuj's fbcp-ili9341 \n\thttps://github.com/juj/fbcp-ili9341\n\n\n\n" ;
 	read -n 1 -s -r -p "Press any key to continue" ;
 	echo "" ;
	return 0
}

run_st7735(){
##Display    Tools ##LCD-SPI driver (ST77835) ##
	echo -e "\nA place holder for:\n\tjuj's fbcp-ili9341 \n\thttps://github.com/juj/fbcp-ili9341\n\n\n\n" ;
 	read -n 1 -s -r -p "Press any key to continue" ;
 	echo "" ;
	return 0
}

run_ST7789VW(){
##Display    Tools ##LCD-SPI driver (ST7789VW) ##
	echo -e "\nA place holder for:\n\tjuj's fbcp-ili9341 \n\thttps://github.com/juj/fbcp-ili9341\n\n\n\n" ;
 	read -n 1 -s -r -p "Press any key to continue" ;
 	echo "" ;
	return 0
}


go_picorder1(){
##picorderOS Tools ##picorderOS (Setup) ##

  sys_msg=$( echo "Place holder for picorder-config" )

  #whiptail --title "picorderOS-config" --msgbox "$( printf '%s\nsetup and configuration for picorderOS:\n\thttps://github.com/directive0/picorderOS' "${sys_msg[@]}" )" $(stty size) --scrolltext

  if ( whiptail --title  "${filename%.*}" --yesno  "Download and set up PicorderOS and its requirements?\n\n" 0 0  ) ; then
    if ! which git >/dev/null; then
      sudo apt update && sudo apt install git -y
    fi

    if [ ! -d "$HOME/.local/src/picorderOS/" ]; then
      git clone https://github.com/directive0/picorderOS "$HOME/.local/src/picorderOS/"
	else
		whiptail --title "Error" --msgbox "picorderOS is already located at $HOME/.local/src/picorderOS/" 10 60 ;
    fi
  fi
}

ini_tr109(){
##picorderOS Tools ##Configure  (tr109) ##

# Define the list of options
options=( "pc" "tr108" "tr109" "sensehat" "system_vitals" "bme" "amg8833" "pocket_geiger" "ir_thermo" "envirophat" )

# Use whiptail to display the checklist dialog and capture the user's selections
choices=$(whiptail --checklist "Select sensors to include:" 15 60 9 \
	"pc" "" off \
    "sensehat" "" off \
    "envirophat" "" off \
    "system_vitals" "" off \
    "bme" "" off \
    "amg8833" "" off \
    "pocket_geiger" "" off \
    "ir_thermo" "" off \
    "tr108" "" off \
    "tr109" "" on \
    3>&1 1>&2 2>&3)

# Parse the user's selections and create a corresponding "yes/no" list
result=""
for option in ${options[@]}; do
    if echo "$choices" | grep -q "\<$option\>"; then
        status="yes"
    else
        status="no"
    fi
    result="${result}${option}=${status}\n"
done

# Output the final result
echo -e "$result" > $DIRECTORY/config.ini
whiptail --textbox $DIRECTORY/config.ini $(stty size) --scrolltext


}

run_about(){
##picorderOS Tools ##About ##

  whiptail --msgbox "\
This is beta software:
Some of the options may have difficulties if you have heavily customised your installation.

${filename%.*} provides configuration of the Raspberry Pi.
${filename%.*} can be run at any time. \

" 20 70 1

}



dist_conf(){
##System     Tools ##Configuration Utility (raspi-config) ##

    [[ -f /bin/raspi-config ]] && sudo raspi-config
    
}
